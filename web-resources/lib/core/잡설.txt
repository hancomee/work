
2018-09-25

기존 @Template와 현행 html 프레임워크와의 비교.

@Template의 경우 코드 읽기가 불편했던 것 같다.
HTMLElement와 객체를 일체화하는 개념덕에 코딩하는 데에는 좀 더 수월한 면이 있었다.
뻔한 로직들이 프레임워크 엔진안으로 캡슐화되면서 실제 필요한 로직들만 표면에 드러나는 효과도 좋았다.
하지만 모두 작성된 코드를 나중에 살펴볼때마다 여기저기 난립해 존재하는 로직들로 인해 코드읽기가 다소 난해했다.

이번에 새로 작성한 html 프레임워크는 사실상 프레임워크라기 보다는 보다 세분화된 라이브러리에 가깝다.
덕분에 세부적인 로직에 대한 테스트가 쉬워졌으며, 작은 규모의 개발에도 보다 손쉽게 가져다 쓸 수 있는 장점이 있다.
기존 @Template를 개발에 도입하기 위해서는 전체 프로젝트를 @Template 틀에 맞춰야했다.
html을 사용하면 성능최적화도 한결 수월하다.
html프레임워크에 발맞춰 다른 라이브러리들도 더 세분화되었다.

확실히 나의 기존 코딩 전략은 프로젝트 전반을 아우르는 거대한 프레임워크를 짜는 형태였다.
그러나 하드소멸 사건 이후 전면적인 코드 복원 작업을 하는 동안, 전략이 바뀌었다.
프레임워크를 버리고 라이브러리를 채택한 것이다.
더 이상 쪼갤 수 없을만큼 단편화된 로직들의 라이브러리를 구축해놓고,
프로젝트시에는 이러한 라이브러리를 조합해 활용하는 형태가 새로운 패러다임의 골자다.

나는 작은 프로젝트를 끊임없이 수행하는 편인데, 거대한 프레임워크는 이같은 프로젝트들에 도입하기에는
나 스스로 부담을 느껴왔던게 사실이다.

그리고 무엇보다 핵심은 코드읽기였다.
사실상 @Template의 코드읽기 어려움때문에 새로운 프레임워크를 개발했다고 보는게 맞다.
그렇다면 실제 코드읽기가 개선되었는가?

이것은 좀 더 지나봐야 알 것 같다.